/*code to find first and last occurences of a  number*/
#include<iostream>
#include<bits/stdc++.h>
using namespace std;
int firstoccur(int arr[],int size,int key){
    int s = 0,e = size - 1;
    int mid = (s + e) >> 1;
    int ans = -1;
    while(s <= e){
        if (key == arr[mid])
        {
            ans = mid;
            e = mid - 1;
        }
        else if (key > arr[mid])
        {
            s = mid + 1;
        }
        else if(key < arr[mid]){
            e = mid - 1;
        }
        mid = (s + e) >> 1;
    }
    return ans;
}
int lastoccur(int arr[],int size,int key){
    int s = 0,e = size - 1;
    int mid = (s + e) >> 1;
    int ans = -1;
    while(s <= e){
        if (key == arr[mid])
        {
            ans = mid;
            s = mid + 1;
        }
        else if (key > arr[mid])
        {
            s = mid + 1;
        }
        else if(key < arr[mid]){
            e = mid - 1;
        }
        mid = (s + e) >> 1;
    }
    return ans;
}

int main(){
    int trial[6] = {1,2,3,3,3,4};
    cout<<firstoccur(trial,6,3)<<endl;
    cout<<lastoccur(trial,6,3)<<endl;
}


/*code to find number of occurences of 3*/

//using the formula ,dat no of occurences = (lastindex - firstindex) + 1
#include<iostream>
#include<bits/stdc++.h>
using namespace std;
int firstoccur(int arr[],int size,int key){
    int s = 0,e = size - 1;
    int mid = (s + e) >> 1;
    int ans = -1;
    while(s <= e){
        if (key == arr[mid])
        {
            ans = mid;
            e = mid - 1;
        }
        else if (key > arr[mid])
        {
            s = mid + 1;
        }
        else if(key < arr[mid]){
            e = mid - 1;
        }
        mid = (s + e) >> 1;
    }
    return ans;
}
int lastoccur(int arr[],int size,int key){
    int s = 0,e = size - 1;
    int mid = (s + e) >> 1;
    int ans = -1;
    while(s <= e){
        if (key == arr[mid])
        {
            ans = mid;
            s = mid + 1;
        }
        else if (key > arr[mid])
        {
            s = mid + 1;
        }
        else if(key < arr[mid]){
            e = mid - 1;
        }
        mid = (s + e) >> 1;
    }
    return ans;
}
int main(){
    int trial[6] = {1,2,3,3,3,4};
    int firstindex = firstoccur(trial,6,3);
    int lastindex = lastoccur(trial,6,3);
    int ans = (lastindex - firstindex) + 1;
    cout<<ans<<endl;
}

//peak index of mountain array
/* watch vid 13*/
#include<iostream>
#include<bits/stdc++.h>
using namespace std;
int peak(int arr[],int size){
    int s = 0;
    int e = arr.size() - 1;
    int mid = (s + e) >> 1;
    while(s < e){
        if (arr[mid] < arr[mid + 1])
        {
            s = mid + 1;
        }
        else{
            e = mid;
        }
        //return mid;
        mid = (s + e) >> 1;
    }
    return s;
}
int main(){
    int trial[6] = {1,2,4,5,4,1};
    cout<<peak(trial,6);
}

